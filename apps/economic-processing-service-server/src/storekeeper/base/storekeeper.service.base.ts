/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Storekeeper as PrismaStorekeeper,
  Inventory as PrismaInventory,
} from "@prisma/client";

export class StorekeeperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StorekeeperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storekeeper.count(args);
  }

  async storekeepers(
    args: Prisma.StorekeeperFindManyArgs
  ): Promise<PrismaStorekeeper[]> {
    return this.prisma.storekeeper.findMany(args);
  }
  async storekeeper(
    args: Prisma.StorekeeperFindUniqueArgs
  ): Promise<PrismaStorekeeper | null> {
    return this.prisma.storekeeper.findUnique(args);
  }
  async createStorekeeper(
    args: Prisma.StorekeeperCreateArgs
  ): Promise<PrismaStorekeeper> {
    return this.prisma.storekeeper.create(args);
  }
  async updateStorekeeper(
    args: Prisma.StorekeeperUpdateArgs
  ): Promise<PrismaStorekeeper> {
    return this.prisma.storekeeper.update(args);
  }
  async deleteStorekeeper(
    args: Prisma.StorekeeperDeleteArgs
  ): Promise<PrismaStorekeeper> {
    return this.prisma.storekeeper.delete(args);
  }

  async findInventories(
    parentId: string,
    args: Prisma.InventoryFindManyArgs
  ): Promise<PrismaInventory[]> {
    return this.prisma.storekeeper
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inventories(args);
  }
}
