/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Inventory as PrismaInventory,
  Request as PrismaRequest,
  ReservationQueue as PrismaReservationQueue,
  Storekeeper as PrismaStorekeeper,
} from "@prisma/client";

export class InventoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InventoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inventory.count(args);
  }

  async inventories(
    args: Prisma.InventoryFindManyArgs
  ): Promise<PrismaInventory[]> {
    return this.prisma.inventory.findMany(args);
  }
  async inventory(
    args: Prisma.InventoryFindUniqueArgs
  ): Promise<PrismaInventory | null> {
    return this.prisma.inventory.findUnique(args);
  }
  async createInventory(
    args: Prisma.InventoryCreateArgs
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.create(args);
  }
  async updateInventory(
    args: Prisma.InventoryUpdateArgs
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.update(args);
  }
  async deleteInventory(
    args: Prisma.InventoryDeleteArgs
  ): Promise<PrismaInventory> {
    return this.prisma.inventory.delete(args);
  }

  async findRequests(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.inventory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async findReservationQueues(
    parentId: string,
    args: Prisma.ReservationQueueFindManyArgs
  ): Promise<PrismaReservationQueue[]> {
    return this.prisma.inventory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reservationQueues(args);
  }

  async getStorekeeper(parentId: string): Promise<PrismaStorekeeper | null> {
    return this.prisma.inventory
      .findUnique({
        where: { id: parentId },
      })
      .storekeeper();
  }
}
