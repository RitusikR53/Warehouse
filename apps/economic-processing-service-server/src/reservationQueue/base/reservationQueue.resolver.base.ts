/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReservationQueue } from "./ReservationQueue";
import { ReservationQueueCountArgs } from "./ReservationQueueCountArgs";
import { ReservationQueueFindManyArgs } from "./ReservationQueueFindManyArgs";
import { ReservationQueueFindUniqueArgs } from "./ReservationQueueFindUniqueArgs";
import { CreateReservationQueueArgs } from "./CreateReservationQueueArgs";
import { UpdateReservationQueueArgs } from "./UpdateReservationQueueArgs";
import { DeleteReservationQueueArgs } from "./DeleteReservationQueueArgs";
import { Employee } from "../../employee/base/Employee";
import { Inventory } from "../../inventory/base/Inventory";
import { ReservationQueueService } from "../reservationQueue.service";
@graphql.Resolver(() => ReservationQueue)
export class ReservationQueueResolverBase {
  constructor(protected readonly service: ReservationQueueService) {}

  async _reservationQueuesMeta(
    @graphql.Args() args: ReservationQueueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReservationQueue])
  async reservationQueues(
    @graphql.Args() args: ReservationQueueFindManyArgs
  ): Promise<ReservationQueue[]> {
    return this.service.reservationQueues(args);
  }

  @graphql.Query(() => ReservationQueue, { nullable: true })
  async reservationQueue(
    @graphql.Args() args: ReservationQueueFindUniqueArgs
  ): Promise<ReservationQueue | null> {
    const result = await this.service.reservationQueue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReservationQueue)
  async createReservationQueue(
    @graphql.Args() args: CreateReservationQueueArgs
  ): Promise<ReservationQueue> {
    return await this.service.createReservationQueue({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        inventory: args.data.inventory
          ? {
              connect: args.data.inventory,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ReservationQueue)
  async updateReservationQueue(
    @graphql.Args() args: UpdateReservationQueueArgs
  ): Promise<ReservationQueue | null> {
    try {
      return await this.service.updateReservationQueue({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          inventory: args.data.inventory
            ? {
                connect: args.data.inventory,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReservationQueue)
  async deleteReservationQueue(
    @graphql.Args() args: DeleteReservationQueueArgs
  ): Promise<ReservationQueue | null> {
    try {
      return await this.service.deleteReservationQueue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: ReservationQueue
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Inventory, {
    nullable: true,
    name: "inventory",
  })
  async getInventory(
    @graphql.Parent() parent: ReservationQueue
  ): Promise<Inventory | null> {
    const result = await this.service.getInventory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
