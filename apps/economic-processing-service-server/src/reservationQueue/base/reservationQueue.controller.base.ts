/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReservationQueueService } from "../reservationQueue.service";
import { ReservationQueueCreateInput } from "./ReservationQueueCreateInput";
import { ReservationQueue } from "./ReservationQueue";
import { Request } from "../../request/base/Request";
import { ReservationQueueFindManyArgs } from "./ReservationQueueFindManyArgs";
import { ReservationQueueWhereUniqueInput } from "./ReservationQueueWhereUniqueInput";
import { ReservationQueueUpdateInput } from "./ReservationQueueUpdateInput";

export class ReservationQueueControllerBase {
  constructor(protected readonly service: ReservationQueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReservationQueue })
  async createReservationQueue(
    @common.Body() data: ReservationQueueCreateInput
  ): Promise<ReservationQueue> {
    return await this.service.createReservationQueue({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        inventory: data.inventory
          ? {
              connect: data.inventory,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        inventory: {
          select: {
            id: true,
          },
        },

        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReservationQueue] })
  @ApiNestedQuery(ReservationQueueFindManyArgs)
  async reservationQueues(
    @common.Req() request: Request
  ): Promise<ReservationQueue[]> {
    const args = plainToClass(ReservationQueueFindManyArgs, request.query);
    return this.service.reservationQueues({
      ...args,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        inventory: {
          select: {
            id: true,
          },
        },

        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReservationQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reservationQueue(
    @common.Param() params: ReservationQueueWhereUniqueInput
  ): Promise<ReservationQueue | null> {
    const result = await this.service.reservationQueue({
      where: params,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        inventory: {
          select: {
            id: true,
          },
        },

        quantity: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReservationQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReservationQueue(
    @common.Param() params: ReservationQueueWhereUniqueInput,
    @common.Body() data: ReservationQueueUpdateInput
  ): Promise<ReservationQueue | null> {
    try {
      return await this.service.updateReservationQueue({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          inventory: data.inventory
            ? {
                connect: data.inventory,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          inventory: {
            select: {
              id: true,
            },
          },

          quantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReservationQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReservationQueue(
    @common.Param() params: ReservationQueueWhereUniqueInput
  ): Promise<ReservationQueue | null> {
    try {
      return await this.service.deleteReservationQueue({
        where: params,
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          inventory: {
            select: {
              id: true,
            },
          },

          quantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
