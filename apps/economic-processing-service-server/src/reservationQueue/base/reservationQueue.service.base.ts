/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ReservationQueue as PrismaReservationQueue,
  Employee as PrismaEmployee,
  Inventory as PrismaInventory,
} from "@prisma/client";

export class ReservationQueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReservationQueueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reservationQueue.count(args);
  }

  async reservationQueues(
    args: Prisma.ReservationQueueFindManyArgs
  ): Promise<PrismaReservationQueue[]> {
    return this.prisma.reservationQueue.findMany(args);
  }
  async reservationQueue(
    args: Prisma.ReservationQueueFindUniqueArgs
  ): Promise<PrismaReservationQueue | null> {
    return this.prisma.reservationQueue.findUnique(args);
  }
  async createReservationQueue(
    args: Prisma.ReservationQueueCreateArgs
  ): Promise<PrismaReservationQueue> {
    return this.prisma.reservationQueue.create(args);
  }
  async updateReservationQueue(
    args: Prisma.ReservationQueueUpdateArgs
  ): Promise<PrismaReservationQueue> {
    return this.prisma.reservationQueue.update(args);
  }
  async deleteReservationQueue(
    args: Prisma.ReservationQueueDeleteArgs
  ): Promise<PrismaReservationQueue> {
    return this.prisma.reservationQueue.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.reservationQueue
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getInventory(parentId: string): Promise<PrismaInventory | null> {
    return this.prisma.reservationQueue
      .findUnique({
        where: { id: parentId },
      })
      .inventory();
  }
}
